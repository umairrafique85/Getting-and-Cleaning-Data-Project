seq_len(3)
seq_along(c('a', 'b', 'c'))
?nchar
formals(cat)
?cat
str(rnorm)
args(rnorm)
lm()
lm
args(lm)
str(lm)
search()
library(ggplot2)
search()
installed.packages()
View(installed.packages())
rnorm(10)
?rnorm
rnorm(10, 1, 1)
mean(rnorm(10, 1, 1))
mean(rnorm(10, 1))
mean(rnorm(10, 1))
mean(rnorm(10, 1))
mean(rnorm(10, 1))
mean(rnorm(10, 1))
mean(rnorm(10, 1))
mean(rnorm(10, 1))
mean(rnorm(10, 1))
mean(rnorm(10, 1))
mean(rnorm(10, 1))
mean(rnorm(10, 1))
?runif
matrix(1:4, 2, 2)
matrix(1:4, 2, 1)
matrix(1:4, 2, 3)
matrix(1:4, 2, 4)
matrix(1:4, 2, 4)[, 4]
matrix(1:4, 2, 4)[1, 4]
g(3, 10)
gl(3, 10)
?gl
gl(3)
gl(3, 1)
?split
x <- c(rnorm(10), runif(10), rnorm(10, 1))
x
split(x, gl(3, 10))
library(datasets)
View(airquality)
splitair <- split(airquality, airquality$Month)
splitair
str(splitair)
lapply(splitair, function(x) {colMeans(x[, c("Ozone", "Solar.R", "Wind")])})
sapply(splitair, function(x) {colMeans(x[, c("Ozone", "Solar.R", "Wind")])})
sapply(splitair, function(x) {colMeans(x[, c("Ozone", "Solar.R", "Wind")], na.rm = TRUE)})
?interaction
?range
x <- matrix(rnorm(200), 20, 10)
x
View(x)
quantile(x[1,], probs = c(0.25, 0.75))
apply(x, 1, quantile, probs = c(0.25, 0.75))
?array
?sample
View(installed.packages())
library(ggplot2)
qplot
x <- c(-1, -0.8, -0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6, 0.8, 1)
y <- x^3
y
qplot(x, y)
qplot(y, x)
x <- c(1, 2, 2, 2, 3, 3)
qplot(x, binwidth = 1)
qplot(x)
qplot(x, binwidth = 1)
x2 <- c(1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 4)
qplot(x2, binwidth = 1)
??sample
?sample
?range
1:10
testlist <- 1:10
for (i in seq_along(testlist)) {
}
for (i in seq_along(testlist)) {
print(i) }
for (i in seq_len(length(testlist))) {
print(i) }
for (i in seq_len(testlist)) {
print(i) }
q()
fy <- c(2010,2011,2012,2010,2011,2012,2010,2011,2012)
company <- c("Apple","Apple","Apple","Google","Google","Google","Microsoft","Microsoft","Microsoft")
revenue <- c(65225,108249,156508,29321,37905,50175,62484,69943,73723)
profit <- c(14013,25922,41733,8505,9737,10737,18760,23150,16978)
companiesData <- data.frame(fy, company, revenue, profit)
companiesData <- mutate(companiesData, margin = round((profit/margin)*100),1)
library(dplyr)
companiesData <- mutate(companiesData, margin = round((profit/margin)*100),1)
companiesData <- mutate(companiesData, margin = round((profit/margin)*100),1)
?mutate
companiesData <- mutate(companiesData, margin = (profit/margin)*100)
companiesData <- mutate(companiesData, margin = round((profit/revenue)*100, 1))
View(companiesData)
myresults <- companiesData %>% group_by(company) %>% mutate(highestMargin = max(margin), lowestMargin = min(margin))
View(myresults)
highestProfitMargins <- companiesData %>% group_by(company) %>% summarise(bestMargin = max(margin))
View(highestProfitMargins)
library(plyr)
ddply(companiesData, 'company', summarise, bestMargin = max(margin))
ddply(companiesData, 'company', function(x) {x[x$margin==max(x$margin),]})
fy <- c(2010,2011,2012,2010,2011,2012,2010,2011,2012)
company <- c("Apple","Apple","Apple","Google","Google","Google","Microsoft","Microsoft","Microsoft")
revenue <- c(65225,108249,156508,29321,37905,50175,62484,69943,73723)
profit <- c(14013,25922,41733,8505,9737,10737,18760,23150,16978)
companiesData <- data.frame(fy, company, revenue, profit)
companiesData$margin <- companiesData$profit/companiesData$revenue*100
View(companiesData)
companiesData$margin <- round(companiesData$profit/companiesData$revenue*100,1)
View(companiesData)
y <- c(2010,2011,2012,2010,2011,2012,2010,2011,2012)
company <- c("Apple","Apple","Apple","Google","Google","Google","Microsoft","Microsoft","Microsoft")
revenue <- c(65225,108249,156508,29321,37905,50175,62484,69943,73723)
profit <- c(14013,25922,41733,8505,9737,10737,18760,23150,16978)
companiesData <- data.frame(fy, company, revenue, profit)
fy <- c(2010,2011,2012,2010,2011,2012,2010,2011,2012)
company <- c("Apple","Apple","Apple","Google","Google","Google","Microsoft","Microsoft","Microsoft")
revenue <- c(65225,108249,156508,29321,37905,50175,62484,69943,73723)
profit <- c(14013,25922,41733,8505,9737,10737,18760,23150,16978)
companiesData <- data.frame(fy, company, revenue, profit)
companiesData$margin <- round(companiesData$profit/companiesData$revenue*100, 1)
library(plyr)
?ddply
companiesData[order(companiesData$margin),]
?order
companiesData[order(companiesData$margin, decreasing = T),]
library(dplyr)
companiesData %>% group_by(company) %>% arrange(margin)
companiesData %>% group_by(company) %>% arrange(margin, desc)
?arrange
companiesData %>% group_by(company) %>% arrange(desc(margin), .by_group=TRUE)
load("/media/umair/F00E03AB0E0369C4/Studies/GitRepos/Getting and Cleaning Data Project/UCI HAR Dataset/.RData")
View(mergedset)
library(tidyr)
library(dplyr)
View(mergedset)
colnames(mergedset)[3]
select(mergedset, tBodyAcc-mean()-X: ,)
select(mergedset, tBodyAcc-mean()-X: )
select(mergedset, 3:563)
colnames(mergedset)[563]
longset1 <- gather(mergedset, tBodyAcc-mean()-X:angle(Z,gravityMean), key = "key", value = "measurement")
longset1 <- gather(mergedset, `tBodyAcc-mean()-X`:`angle(Z,gravityMean)`, key = "key", value = "measurement")
colnames(longset1)
rm(longset1)
load("/media/umair/F00E03AB0E0369C4/Studies/GitRepos/Getting and Cleaning Data Project/UCI HAR Dataset/.RData")
library(dplyr)
library(tidyr)
vignette()
vignette(dplyr)
vignette('dplyr')
View(mergedset)
head(select(mergedset, -(subject:activity)))
str(mergedset)
mergedset <- as_tibble(mergedset)
str(mergedset)
mergedset <- data.table::data.table(mergedset)
str(mergedset)
select(mergedset, -(subject:activity))
select(mergedset, subject:activity)
dplyr::select(mergedset, subject:activity)
names(mergedset)[1:3]
select(mergedset, subject:activity)
class(mergedset)
source('/media/umair/F00E03AB0E0369C4/Studies/GitRepos/Getting and Cleaning Data Project/run_analysis.R')
View(trainset)
rm(list())
rm(ls())
rm(list = ls())
acts_train <- read.table('UCI HAR Dataset/train/y_train.txt')
acts_test <- read.table('UCI HAR Dataset/test/y_test.txt')
acts_test$labels <- activityLabels[acts_test[,1],2]
rm(list = ls())
currdir <- dirname(parent.frame(2)$ofile)
setwd(currdir)
library(stringr)
trainset <- read.table('UCI HAR Dataset/train/X_train.txt')
testset <- read.table('UCI HAR Dataset/test/X_test.txt')
activityLabels <- read.table('UCI HAR Dataset/activity_labels.txt')
varnames <- read.table('UCI HAR Dataset/features.txt')
subj_train <- read.table('UCI HAR Dataset/train/subject_train.txt')
subj_test <- read.table('UCI HAR Dataset/test/subject_test.txt')
names(trainset) <- as.character(varnames$V2)
names(testset) <- as.character(varnames$V2)
acts_train <- read.table('UCI HAR Dataset/train/y_train.txt')
acts_test <- read.table('UCI HAR Dataset/test/y_test.txt')
acts_train$labels <- activityLabels[acts_train[,1],2]
acts_test$labels <- activityLabels[acts_test[,1],2]
trainset <- trainset[,str_detect(names(trainset), 'mean') | str_detect(names(trainset), 'std')]
testset <- testset[,str_detect(names(testset), 'mean') | str_detect(names(testset), 'std')]
trainset <- cbind(subj_train$V1, acts_train$labels, trainset)
testset <- cbind(subj_test$V1, acts_test$labels, testset)
View(trainset)
names(trainset)[c(1, 2)] <- c('subject', 'activity')
names(testset)[c(1, 2)] <- c('subject', 'activity')
View(trainset)
View(testset)
mergedset <- rbind(trainset, testset)
rm(trainset, testset, subj_test, subj_train, acts_test, acts_train)
rm(trainset, testset, subj_test, subj_train, acts_test, acts_train, activityLabels, varnames)
library(tidyverse)
varnames <- read.table('UCI HAR Dataset/features.txt')
varnames <- as.character(varnames$V2)
View(mergedset)
varnames
varnames <- names(mergedset[3:])
varnames <- names(mergedset[-c(1, 2)])
varnames
varnames <- str_replace(varnames, c('tBody', 'BodyAcc', '-mean()', '-std()'), c('Time_Body', 'Body_Acceleration', '_mean', '_std'))
varnames <- str_replace(varnames, c('tBody', 'BodyAcc', '-mean()', '-std()'), c('Time_Body', 'Body_Acceleration', '_mean', '_std'))
varnames
varnames <- str_replace(varnames, 'tBody', 'Time_Body')
varnames
varnames <- names(mergedset)
varnames <- str_replace(varnames, 'tBody', 'Time_Body')
varnames
varnames <- str_replace(varnames, c('fBody', 'BodyGyro',  c('frequency_Body', 'Body_Gyro')
library(gsubfn)
?gsub
install.packages('gsubfn')
varnames
library(gsubfn)
varnames <- names(mergedset)[-c(1, 2)]
varnames
?gsubfn
